<controls:MetroWindow x:Class="MarkdownMonster.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MarkdownMonster"
		xmlns:localwindows="clr-namespace:MarkdownMonster.Windows"
        xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
        xmlns:fa="http://schemas.fontawesome.io/icons/"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:dragablz="http://dragablz.net/winfx/xaml/dragablz"
        xmlns:System="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"					  
        TitlebarHeight="35"
        Name="MainApplicationWindow"                      
        Title="Markdown Monster" TitleCharacterCasing="Normal"
        Icon="Assets\MarkdownMonster_Icon_256.png"
        BorderThickness="0" 
        GlowBrush="Black"                           
        ResizeMode="CanResizeWithGrip"		
		FontSize="13"
        Height="740" Width="1100"  
        MinWidth="800" MinHeight="700" 
        WindowTransitionsEnabled="False">
    <Window.InputBindings>
        <KeyBinding Modifiers="Alt+Shift"
                    Key="Return"
                    Command="{Binding  Commands.DistractionFreeModeCommand}" />
        <KeyBinding Key="F11" Command="{Binding Commands.PresentationModeCommand}"/>
        <KeyBinding Modifiers="Ctrl" Key="P" Command="{Binding PrintPreviewCommand}" />
        
        <KeyBinding Modifiers="Ctrl+Shift" Key="S" Command="{Binding Commands.SaveAsCommand}" />
        <KeyBinding Modifiers="Ctrl" Key="N" Command="{Binding Commands.NewDocumentCommand }"  />
        <KeyBinding Modifiers="Ctrl" Key="O" Command="{Binding Commands.OpenDocumentCommand }"    />
        <KeyBinding Modifiers="Ctrl" Key="Q" Command="{Binding Commands.ToolbarInsertMarkdownCommand }"  CommandParameter="quote"  />
        <KeyBinding Modifiers="Ctrl" Key="W" Command="{Binding  Commands.CloseActiveDocumentCommand}" />
        <KeyBinding Modifiers="Ctrl" Key="F4" Command="{Binding Commands.CloseActiveDocumentCommand}" />
        <KeyBinding Modifiers="Alt" Key="Z" Command="{Binding Commands.WordWrapCommand}" />
        <KeyBinding Key="F1" Command="{Binding Commands.HelpCommand}" />
        
        <!-- Commands that are handled in the Markdown Editor because they are not working here -->
        <!--<KeyBinding Modifiers="Ctrl+Shift" Key="Z" Command="{Binding Commands.RemoveMarkdownFormattingCommand}" />-->        
    </Window.InputBindings>

    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <localwindows:InvertedBooleanConverter  x:Key="InvertedBooleanConverter" />
        <localwindows:BooleanToCollapsedVisibilityConverter x:Key="BooleanToCollapsedVisibilityConverter" />
        <localwindows:FileNameFromPathConverter x:Key="FileNameFromPathConverter" />
        <localwindows:FolderNameFromPathConverter x:Key="FolderNameFromPathConverter" />


        <ObjectDataProvider x:Key="ApplicationThemeEnums"
                            MethodName="GetValues" ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="local:Themes"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ContextMenu x:Key="TabItemContextMenu" Name="TabItemContextMenu">
            <MenuItem Header="_Close Document" Command="{Binding DataContext.Commands.CloseActiveDocumentCommand}" />
            <MenuItem Name="MenuCloseAllTabs" Header="Close All Documents" Command="{Binding DataContext.Commands.CloseAllDocumentsCommand}"/>
            <MenuItem Name="MenuCloseAllButThisTab" Header="Close All But This Document"  Command="{Binding DataContext.Commands.CloseAllDocumentsCommand}" CommandParameter="AllBut" />
            <Separator/>
            <MenuItem Name="ContextOpenInCommandWindow" Header="Open _Terminal" Click="Button_CommandWindow" />
            <MenuItem Name="ContextOpenInFolder" Header="Open _Folder in Explorer" Click="Button_OpenExplorer" />
            <MenuItem Name="ContextOpenInFolderBrowser" Header="Open Folder in Folder _Browser" Click="Button_OpenFolderBrowser" />
            <MenuItem Name="ContextCommitToGit" Header="Commit and Push to _Git"
                      Command="{Binding DataContext.CommitToGitCommand}"   />
            <Separator/>
            <MenuItem Name="ContextCopyFoldername" Header="Copy Foldername" Command="{Binding DataContext.Commands.CopyFolderToClipboardCommand}" />
        </ContextMenu>
        
        <ContextMenu x:Key="ContextMenuRecentFiles">
            <MenuItem Header="Recent Files go here..."/>
        </ContextMenu>
    </Window.Resources>
    <Window.ContextMenu>
        <ContextMenu Name="EditorContextMenu" MinWidth="175">
        </ContextMenu>
    </Window.ContextMenu>

    <controls:MetroWindow.LeftWindowCommands>
        <controls:WindowCommands>
         
        </controls:WindowCommands>
    </controls:MetroWindow.LeftWindowCommands>

    <controls:MetroWindow.RightWindowCommands>
        <controls:WindowCommands>
            <StackPanel Orientation="Horizontal">
						
                <ToggleButton   fa:Awesome.Content="Check"  Foreground="{StaticResource BlueItem}"                                                                
                            IsChecked="{Binding Configuration.EditorEnableSpellcheck}"
                            ToolTip="enable/disable spell-checking"
                            Click="ButtonSpellCheck_Click"
                            TextElement.FontSize="16"
                            TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
                />

                <ToggleButton Name="ToolButtonPreview"  Foreground="{StaticResource BlueItem}"
                                Margin="2,0,0,0"
                                IsChecked="{Binding IsPreviewBrowserVisible}"
                                Command="{Binding Commands.PreviewBrowserCommand}"                                  
                                ToolTip="open/hide the HTML Preview Pane (alt-v-p)"
                                fa:Awesome.Content="Globe"
                                TextElement.FontSize="16"                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome">
                </ToggleButton>

                <Button 
                        Margin="-10,0,0,0"
						ToolTip="Preview Modes"                                
				        fa:Awesome.Content="CaretDown" Foreground="{StaticResource BlueItem}"				         
				        TextElement.FontSize="11" 
				        TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
				>
                    <i:Interaction.Behaviors>
                        <local:DropDownButtonBehavior />
                    </i:Interaction.Behaviors>
                    <Button.ContextMenu>
                        <ContextMenu>

                            <MenuItem Header="Toggle Html _Preview Window"
                                      IsCheckable="True" 
                                      InputGestureText="alt-v-p"
                                      IsChecked="{Binding IsPreviewBrowserVisible}"
                                      Command="{Binding Commands.PreviewBrowserCommand}"
                                      IsEnabled="{Binding IsEditorActive}">
                            </MenuItem>
                            <MenuItem Header="View in Web _Browser" 
                                      Command="{Binding ViewInExternalBrowserCommand}"
                                      InputGestureText="alt-v-b"
                                      IsEnabled="{Binding IsEditorActive}" />
                            <Separator/>                             
                            <MenuItem Header="Internal Preview" CommandParameter="InternalPreview" Command="{Binding Commands.PreviewModesCommand}"
                                      IsCheckable="True" IsChecked="{Binding IsInternalPreview}"/>
                            <MenuItem CommandParameter="ExternalPreviewWindow" Header="External Preview Window"  Command="{Binding Commands.PreviewModesCommand}"
                                      IsCheckable="True" IsChecked="{Binding IsExternalPreview}"/>
                        </ContextMenu>
                    </Button.ContextMenu>

                </Button>

                <Button Command="{Binding ShowFolderBrowserCommand}" 
                        Margin="2,0"
						ToolTip="show Folder Browser pane (alt-v-f)"                                
				        fa:Awesome.Content="FilesOutline" Foreground="{StaticResource BlueItem}"				         
				        TextElement.FontSize="16" 
				        TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
				/>

                <ToggleButton Name="ToolButtonFullScreen"   Foreground="{StaticResource BlueItem}"
				              Margin="2,0"
                                      IsChecked="{Binding IsFullScreen}"
                                      Command="{Binding Commands.DistractionFreeModeCommand}"                                                 
                                      ToolTip="toggle distraction free edit mode (alt-shift-enter). configure with: 'DistractionFreeModeHideOptions' setting."
                                 fa:Awesome.Content="ArrowsAlt"
                                TextElement.FontSize="16"
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"      
                                      />
                <ToggleButton Name="ToolButtonPresentationMode"   Foreground="{StaticResource BlueItem}"
                              Margin="2,0"
                                      IsChecked="{Binding IsPresentationMode}"
                                      Command="{Binding Commands.PresentationModeCommand}"                                                 
                                      ToolTip="toggle presentation mode (F11)"
                                 fa:Awesome.Content="Desktop"
                                TextElement.FontSize="16"
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"      
                                      />
            </StackPanel>
        </controls:WindowCommands>
    </controls:MetroWindow.RightWindowCommands>



    <Grid Name="WindowGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"  Name="MainMenuGridRow"/>
            <RowDefinition Height="Auto" Name="ToolbarGridRow"/>
            <RowDefinition Height="*" Name="MainContentGridRow" />
            <RowDefinition Height="Auto" Name="StatusBarGridRow"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>

        <Menu x:Name="MainMenu" Grid.Row="0" 
              Margin="0" 
              FontSize="{Binding Path=FontSize,ElementName=MainApplicationWindow}"
              HorizontalAlignment="Stretch">
            <MenuItem Header="_File" Name="MenuFile" x:FieldModifier="public" >
                <MenuItem Name="ButtonNewFile" Header="_New" Command="{Binding Commands.NewDocumentCommand}" InputGestureText="ctrl-n"/>
                <MenuItem Name="ButtonNewWeblogPost" Header="New Weblog Post" Command="{Binding Commands.NewWeblogPostCommand}" />
                <Separator/>
                <MenuItem Name="ButtonOpenFile" Header="_Open" Command="{Binding Commands.OpenDocumentCommand}"  InputGestureText="ctrl-o"/>
                <MenuItem Name="ButtonOpenFromHtml" Header="Open from _Html" Click="Button_Handler" ToolTip="Attempts to open an Html document as Markdown text."/>
                <MenuItem Name="ButtonRecentFiles" Header="Recent Documents" Click="Button_Handler"/>
                
                <MenuItem Name="ButtonSaveFile" Header="_Save" Command="{Binding Commands.SaveCommand}"  
                          InputGestureText="ctrl+s"/>
                <MenuItem Name="ButtonSaveAsFile" Header="Save _As " Command="{Binding Commands.SaveAsCommand}"  
                          InputGestureText="ctrl+shift+s"/>

                <Separator />
                
                <MenuItem Name="ButtonSaveAsSecureFile" Header="Save As _Encrypted File" Command="{Binding Commands.SaveAsCommand}" CommandParameter="Secure"  />
                <MenuItem Name="ButtonSaveAsHtml" Header="Save As _Html" Command="{Binding Commands.SaveAsHtmlCommand}" />
                <MenuItem x:Name="ButtonGeneratePdf" Header="Save As Pdf" Command="{Binding GeneratePdfCommand}"
                           />
                
                <Separator/>
                
                <MenuItem Header="View in Web _Browser" Name="ButtonViewInWebBrowser"                          
                          Command="{Binding ViewInExternalBrowserCommand}"
                          InputGestureText="alt-v-b"
                          IsEnabled="{Binding IsEditorActive}" />
				<MenuItem Name="ButtonPrintPreview" Header="_Print Output" Command="{Binding PrintPreviewCommand}" InputGestureText="ctrl-p"/>
                <Separator />
                <MenuItem Header="_Close Document" Command="{Binding Commands.CloseActiveDocumentCommand}" InputGestureText="ctrl-w"/>
                <MenuItem Header="Close _All Documents" Command="{Binding Commands.CloseAllDocumentsCommand}"  IsEnabled="{Binding IsEditorActive}"/>

                <Separator />
                <MenuItem Name="ButtonExit" Header="E_xit" Click="Button_Handler"/>
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="Paste Html as Markdown" IsEnabled="{Binding IsEditorActive}" 
                          Click="Button_PasteMarkdownFromHtml" 
                          ToolTip="Pastes HTML from your clipboard as Markdown text" 
                          InputGestureText="ctrl-shift-v"                          
                          />
                <MenuItem Header="Copy Markdown Selection as Html" IsEnabled="{Binding IsEditorActive}"                          
                          Command="{Binding CopyAsHtmlCommand}"
                          ToolTip="Copies the selected markdown from the editor as HTML to the clipboard"
                          InputGestureText="ctrl-shift-c" />
                <MenuItem Header="Remove Markdown _Formatting" IsEnabled="{Binding IsEditorActive}" 
                          Command="{Binding Commands.RemoveMarkdownFormattingCommand}"
                          ToolTip="Removes Markdown formatting from a selection." 
                          InputGestureText="ctrl-shift-z" />
                <Separator />
                <MenuItem Name="Button_Spellcheck" Header="Toggle _Spellchecking" Click="ButtonSpellCheck_Click" />
                <Separator />
                <MenuItem Header="Find in Document" 
                          Name="Button_Find"
                          IsEnabled="{Binding IsEditorActive}"                          
                          ToolTip="Find text in the active document" 
                          Click="Button_Handler"
                          InputGestureText="ctrl-f" />
                <MenuItem Header="Find next occurrence"
                          Name="Button_FindNext"
                          IsEnabled="{Binding IsEditorActive}"
                          ToolTip="Find the next occurrence of the searched text in the active document"
                          Click="Button_Handler"
                          InputGestureText="F3" />
                <MenuItem Header="Find and Replace in Document" 
                          Name="Button_Replace"
                          IsEnabled="{Binding IsEditorActive}"
                          ToolTip="Find text in the active document" 
                          Click="Button_Handler"
                          InputGestureText="ctrl-h" />
            </MenuItem>
            <MenuItem Header="_Tools">                 
                <MenuItem Name="MenuAddinManager" Header="_Add-in Manager" Command="{Binding Commands.AddinManagerCommand}"/>
                <MenuItem Name="MenuAddins" Header="Add-ins" />
                <Separator/>
                <MenuItem Name="MenuOpenConfigFolder" Header="Open Configuration Folder" Click="Button_Handler" />
                <MenuItem Name="MenuOpenPreviewFolder" Header="Open Preview Themes Folder" Click="Button_Handler"/>
                <Separator/>
                <MenuItem Name="MenuOpenInCommandWindow" Header="Open _Terminal" Click="Button_CommandWindow"  IsEnabled="{Binding IsEditorActive}" />
                <MenuItem Name="MenuOpenInFolder" Header="Open E_xplorer" 
                        Click="Button_OpenExplorer"  
                        IsEnabled="{Binding IsEditorActive}" 
                        ToolTip="Open the document's folder in Explorer" />
                <Separator/>
                <MenuItem Name="MenuCommitToGit" Header="Commit to _Git and Push" Command="{Binding CommitToGitCommand}" IsEnabled="{Binding IsEditorActive}" 
                          ToolTip="Commits the open document to Git and tries to push to the active remote branch." />
                <MenuItem Name="MenuCopyFoldername" Header="Copy Foldername" 
                          ToolTip="Copy the document's foldername to the Clipboard" 
                          Command="{Binding Commands.CopyFolderToClipboardCommand}"
                          IsEnabled="{Binding IsEditorActive}" />
                <Separator/>
                <MenuItem Header="Settings" Command="{Binding SettingsCommand}"/>
            </MenuItem>
            <MenuItem Header="_View">
                <MenuItem Name="ButtonHtmlPreview" 
                          Header="Toggle Html _Preview Window"
                          IsCheckable="True" 
                          InputGestureText="alt-v-p"
                          IsChecked="{Binding IsPreviewBrowserVisible}"
                          Command="{Binding Commands.PreviewBrowserCommand}"
                          IsEnabled="{Binding IsEditorActive}">
                </MenuItem>
                <MenuItem Header="Internal Preview" IsCheckable="True" IsChecked="{Binding IsInternalPreview}"  Command="{Binding Commands.PreviewModesCommand}" CommandParameter="InternalPreview"/>
                <MenuItem Header="External Preview" IsCheckable="True" IsChecked="{Binding IsExternalPreview}" Command="{Binding Commands.PreviewModesCommand}" CommandParameter="ExternalPreviewWindow"/>
                
                <Separator/>
                
                <MenuItem Header="View in Web _Browser" 
                          Command="{Binding ViewInExternalBrowserCommand}"
                          InputGestureText="alt-v-b"
                          IsEnabled="{Binding IsEditorActive}" />
                <MenuItem Name="ButtonPrintPreview2" Header="Print Html Preview" Command="{Binding PrintPreviewCommand}" InputGestureText="ctrl-p"/>
                <Separator/>
                <MenuItem Name="ButtonScrollBrowserUp" 
                          Header="Scroll Preview Browser Up"                         
                          InputGestureText="ctrl-shift-up" Click="Button_Handler"
                          IsEnabled="{Binding IsPreviewBrowserVisible}" />
                <MenuItem Name="ButtonScrollBrowserDown" 
                          Header="Scroll Preview Browser Down"                         
                          InputGestureText="ctrl-shift-down" Click="Button_Handler"
                          IsEnabled="{Binding IsPreviewBrowserVisible}" />
                <Separator/>
	            <MenuItem Name="ButtonToggleFolderBrowser" 
	                      Header="Toggle _Folder Browser Panel"                         
	                      Command="{Binding ShowFolderBrowserCommand}"
	                      InputGestureText="alt-v-f"
	                      ToolTip="Toggles the Folder Browser sidebar panel"
	                      />
                <MenuItem Name="ButtonDistractionFreeMode" 
                          Header="Toggle Distraction Free Mode"                         
                          Command="{Binding Commands.DistractionFreeModeCommand}"
                          ToolTip="Displays the editor in full screen mode"
                          IsCheckable="True"
                          IsChecked="{Binding IsFullScreen}"
                          InputGestureText="alt-shift-enter" 
                          IsEnabled="{Binding IsEditorActive}" />
                <MenuItem Name="ButtonPresentationMode"
                          Header="Toggle Presentation Mode"                         
                          ToolTip="Displays the preview in full screen mode"
                          Command="{Binding Commands.PresentationModeCommand}"
                          IsCheckable="True"
                          IsChecked="{Binding IsPresentationMode}"
                          InputGestureText="F11" 
                          IsEnabled="{Binding IsEditorActive}" />
                <Separator />
                <MenuItem Name="ButtonWordWrap" 
                          Header="_Word Wrap"      
                          Command="{Binding Commands.WordWrapCommand}"                                                                   
                          IsCheckable="True"
                          InputGestureText="alt-z"
                          IsChecked="{Binding Configuration.EditorWrapText, Mode=OneWay}" />

                <MenuItem Name="ButtonLineNumbers" 
                          Header="Line _Numbers"                         
                          Click="Button_Handler"
                          IsCheckable="True"
                          IsChecked="{Binding Configuration.EditorShowLineNumbers}" />

                <MenuItem Name="ButtonShowInvisibles" 
                          Header="Show Invisible Characters"
                          Click="Button_Handler"
                          IsCheckable="True"
                          IsChecked="{Binding Configuration.EditorShowInvisibles}" />
                
                <MenuItem Name="ButtonScrollPastEnd"
                          Header="Mouse Wheel Scroll Past End"
                          Click="Button_Handler"
                          IsCheckable="True"
                          IsChecked="{Binding Configuration.EditorScrollPastEnd}" />
            </MenuItem>

            <!-- generated dynamically by command -->
            <MenuItem Name="WindowMenu" Header="_Window" Command="{Binding Commands.WindowMenuCommand}" />


            <MenuItem Header="_Help">
                <MenuItem Name="MenuDocumentation" Header="Documentation" Command="{Binding Commands.HelpCommand}" InputGestureText="F1" />
                <MenuItem Name="MenuMarkdownBasics" Header="Markdown Basics"   Click="Button_Handler"/>
                <MenuItem Name="MenuCreateAddinDocumentation" Header="Documentation for Creating Addins"   Click="Button_Handler"/>
                <MenuItem Name="MenuShowSampleDocument" Header="Show Markdown Feature Sample Document"   Click="Button_Handler"/>
                <Separator />
                <MenuItem Name="MenuMarkdownMonsterSite" Header="Markdown Monster Web Site"   Click="Button_Handler"/>
                <MenuItem Name="MenuBugReport" Header="Report a Bug or Make a Suggestion" Click="Button_Handler"/>
                <Separator />
                <MenuItem Name="MenuCheckNewVersion" Header="Check for New Version" Click="Button_Handler"/>
                <MenuItem Name="MenuRegister" Header="Register Copy" Click="Button_Handler"/>
                <Separator  />
                <MenuItem Name="MenuShowErrorLog" Header="Show Error Log" Click="Button_Handler"/>
                <MenuItem Name="MenuResetConfiguration" Header="Reset Settings to Default" Click="Button_Handler"/>
                <MenuItem Name="MenuBackupConfiguration" Header="Backup Configuration Settings" Click="Button_Handler"/>
                <Separator  />
                <MenuItem Name="ButtonAbout" Header="_About" Click="Button_Handler"/>
            </MenuItem>
        </Menu>

        
        
        <StackPanel Grid.Row="1">
			<ToolBarPanel Name="ToolbarPanelMain" >
				<StackPanel Orientation="Horizontal">
					<ToolBar Name="ToolbarFile"  FontSize="17">
						<Button Name="ToolButtonOpenFile" Margin="7,0,0,0"  Command="{Binding Commands.OpenDocumentCommand}" ToolTip="Open Markdown file (ctrl-o)"                                
                                fa:Awesome.Content="FolderOpen" 
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
                                />
                        <Button Name="ToolbarButtonRecentFiles" Margin="0,0" Click="Button_Handler" ToolTip="Recent Markdown files"
                                        fa:Awesome.Content="CaretDown"
                                        Width="15" 
                                        TextElement.FontSize="11"
                                        TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"                                 
                                 >
                            <!--<i:Interaction.Behaviors>
                                <local:DropDownButtonBehavior />
                            </i:Interaction.Behaviors>-->
                        </Button>


						<Button  Margin="7,0,7,0"  Command="{Binding ShowFolderBrowserCommand}" 
						         ToolTip="Toggle Folder Browser Pane (alt-v-f)"                                
						         fa:Awesome.Content="FilesOutline" 			
								 FontSize="15" 
						         TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
						/>

						<Separator/>

						<Button Name="ToolButtonNewFile" Margin="7,0,0,0" Command="{Binding Commands.NewDocumentCommand}" ToolTip="New file (ctrl-n)"                                
                                fa:Awesome.Content="PlusCircle"                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
                                />

                        <Button Name ="ToolButtonSaveFile" Margin="7,0" Command="{Binding Commands.SaveCommand}" 
								ToolTip="Save active document (ctrl-s)"                                
                                fa:Awesome.Content="CheckCircleOutline"                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
                                />

					</ToolBar>



                    <ToolBar FontWeight="Light" Name="ToolbarEdit" FontSize="17">
                        <Button Name="ButtonBold" Margin="7,0"  ToolTip="Bold (ctrl-b)"                                   
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="bold"                                
                                fa:Awesome.Content="Bold"
                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" />

                        <Button Name ="ButtonItalic" Margin="7,0" ToolTip="Italic (ctrl-i)" 
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="italic"
                                fa:Awesome.Content="Italic" 
                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" />

                       
                        <Button Name ="ButtonStrikeThrough" Margin="7,0" ToolTip="Strikethrough" 
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="strikethrough"
                                fa:Awesome.Content="Strikethrough" 
                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" />

                        <Button Name ="ButtonInlineCode" Margin="5,-4,7,0"
								ToolTip="Inline code inside of a paragraph (ctrl-`)" 
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="inlinecode"  
                                FontWeight="Medium"  
								TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"
                        >`{ }`</Button>
                                                               
                        
                        <!--<Button Name="ButtonFontAwesome" Margin="7,0" ToolTip="Insert FontAwesome Icon"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand}" 
                                CommandParameter="fontawesome"
                                fa:Awesome.Content="FontAwesome" IsEnabled="False"
                                Height="24" Width="24"
                                TextElement.FontSize="16"                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"                                 
                        />-->
                        
                        <Separator />

                        <Button Name="ButtonQuote" Margin="7,0" ToolTip="Quote text (ctrl-q)"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }"  
                                CommandParameter="quote"
                                fa:Awesome.Content="QuoteLeft"
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"                                 
                                />

                        <Button Name ="ButtonList" Margin="7,0" ToolTip="Ordered List (ctrl-l)"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="list"
                                fa:Awesome.Content="ListUl"                                                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"                                 
                                />

                        <Button Name ="ButtonNumberList" Margin="7,0" ToolTip="Turns lines to ordered list (ctrl-l)"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="numberlist"
                                fa:Awesome.Content="ListOl"								                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"                                 
                                />

                        <Button Name ="ButtonTableEditor" Margin="7,0" ToolTip="Opens the interactive table editor"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="table"
                                fa:Awesome.Content="Table"								                                
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"                                 
                        />

                        <Separator />

                        <Button Name ="ButtonH1" Margin="3,0" ToolTip="H1 Text"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="h1" Content="H1" FontWeight="Bold"                                
                                />

                        <Button Name ="ButtonH2" Margin="3,0" ToolTip="H2 Text"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="h2" Content="H2" FontWeight="Bold"                                
                                />

                        <Button Name ="ButtonH3" Margin="3,0" ToolTip="H3 Text"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="h3" Content="H3" FontWeight="Bold"                                
                                />
                        <Button Name ="ButtonH4" Margin="3,0" ToolTip="H4 Text"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="h4" Content="H4" FontWeight="Bold"                                
                                />
                        <Button Name ="ButtonH5" Margin="3,0" ToolTip="H5 Text"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="h5" Content="H5" FontWeight="Bold"                                
                                />
                        <Separator />


                        <Button Name ="ButtonLink" Margin="7,0" ToolTip="Insert link (ctrl-k)"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="href" 
                                fa:Awesome.Content="ExternalLink"
                                 
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
                                />
                        <Button Name ="ButtonImage" Margin="7,0"                              
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="image"                                
                                fa:Awesome.Content="Image"
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" 
                                >
                            <Button.ToolTip>
                                <ToolTip>
                                    <TextBlock>Insert an image from disk or the clipboard (alt-i).
                                        <LineBreak/>
                                        You can also paste images from the clipboard into the document.
                                    </TextBlock>
                                </ToolTip>
                            </Button.ToolTip>
                        </Button>

                        <Button Name ="ButtonCode"  
								ToolTip="Format selected text as code (alt-c)"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="code"                                
                                FontWeight="Medium" 
								Width="27" Margin="0,0,0,0"
                        >{#}</Button>

						<Button Name="ButtonEmoji" Margin="7,0" 
								ToolTip="Insert emoji (ctrl-j)"
                                Command="{Binding Commands.ToolbarInsertMarkdownCommand }" 
                                CommandParameter="emoji"
                                fa:Awesome.Content="SmileOutline"                                                           
                                TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome"                                 
                        />
                    </ToolBar>

					<ToolBar Name="ToolbarAddIns" Visibility="Hidden" FontSize="17">
					</ToolBar>
					
                </StackPanel>
            </ToolBarPanel>
        </StackPanel>


        

        <Grid Name="ContentGrid" Grid.Row="2"  >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Name="FolderBrowserColumn" Width="0"  x:FieldModifier="public" />
                <ColumnDefinition Name="FolderBrowserSeparatorColumn" Width="0" x:FieldModifier="public" />
                <ColumnDefinition Name="MainWindowEditorColumn" Width="*"   x:FieldModifier="public" />
                <ColumnDefinition Name="MainWindowSeparatorColumn" Width="0"  x:FieldModifier="public" />
                <ColumnDefinition Name="MainWindowPreviewColumn"  Width="0"   x:FieldModifier="public"  />
            </Grid.ColumnDefinitions>



            <controls:MetroTabControl x:Name="SidebarContainer" 
                                        Margin="0,5,0,0"
                                        FontSize="13"
                                        Background="#222"
                                        TabStripPlacement="Bottom"
                                        BorderThickness="0">
               
                <TabItem Name="TabFolderBrowser"
                         Margin="0,0,5,0" Visibility="Collapsed" Header=" Files and Folders "
                         controls:ControlsHelper.HeaderFontSize="14">
                    <!--<TabItem.Header>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text=" Files and Folder " />
                        </StackPanel>
                    </TabItem.Header>-->
                    <localwindows:FolderBrowerSidebar x:Name="FolderBrowser">
                    </localwindows:FolderBrowerSidebar>
                </TabItem>
            </controls:MetroTabControl>
                
            

            <GridSplitter Grid.Column="1"                               
			              HorizontalAlignment="Center"                          
			              BorderThickness="0" IsTabStop="False"
			              VerticalAlignment="Stretch">
				<GridSplitter.Template>
					<ControlTemplate TargetType="{x:Type GridSplitter}">
						<Grid Background="Transparent">
							<Image Source="Assets/vsizegrip.png" Height="30" VerticalAlignment="Center" />
						</Grid>
					</ControlTemplate>
				</GridSplitter.Template>
			</GridSplitter>


            <dragablz:TabablzControl x:Name="TabControl" Grid.Column="2"
                                     Margin="0,5,0,0"
                                     FontSize="13"
                                     Background="#222"
                                     BorderThickness="0"
                                     ShowDefaultCloseButton="True"                                     
                                     ShowDefaultAddButton="False"
                                     SelectionChanged="TabControl_SelectionChanged"                                      
                                     Visibility="{Binding IsTabOpen, Converter={StaticResource BooleanToVisibilityConverter}}">
                <!--<dragablz:TabablzControl.Resources>

                    <Style TargetType="RepeatButton"  x:Key="TabControlWindowListButtonStyle">
                        <EventSetter Event="MouseDown"  Handler="TabControlWindowList_Click"/>
                    </Style>

                </dragablz:TabablzControl.Resources>-->
            </dragablz:TabablzControl>
            
            <Grid Grid.Column="2" HorizontalAlignment="Center"  VerticalAlignment="Center"  
                  Visibility="{Binding IsNoTabOpen, Converter={StaticResource BooleanToVisibilityConverter}}"  >

                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Image Source="Assets/MarkdownMonster.png" 
                   Opacity="0.06" 
                   Width="Auto" 
                   VerticalAlignment="Center" 
                   Grid.Row="0" Panel.ZIndex="0"/>

                <TextBlock  FontSize="14" Grid.Row="0" Panel.ZIndex="10"
                        VerticalAlignment="Center" HorizontalAlignment="Center" 
                        LineHeight="22" LineStackingStrategy="MaxHeight">                
                <Run FontSize="48" Foreground="#9F9F9F" FontWeight="Bold">Markdown Monster</Run>
                <LineBreak />
                <Run FontSize="22" FontWeight="SemiBold">Better Markdown Editing for Windows</Run>
       
                <TextBlock Margin="0,10,0,10" Text="" />
                <LineBreak/>

                <Run FontSize="22" FontWeight="DemiBold">Start</Run>
                <LineBreak />
                <Hyperlink  Command="{Binding Commands.NewDocumentCommand}">  New Document</Hyperlink> - ctrl-n
                <LineBreak />
                <Hyperlink Command="{Binding Commands.NewWeblogPostCommand}">  New Weblog Post</Hyperlink>
                <LineBreak />
                <Hyperlink  Command="{Binding Commands.OpenDocumentCommand}">  Open Document...</Hyperlink> - ctrl-o
                <LineBreak />             
                <Hyperlink  FontSize="15" Command="{Binding ShowFolderBrowserCommand}">  Open File and Folder Browser</Hyperlink>
                
                <LineBreak />
                <LineBreak />

                <Run FontSize="22" FontWeight="DemiBold" >Settings</Run>
                <LineBreak />
                <Hyperlink  Command="{Binding SettingsCommand}">  Configure Markdown Monster Settings</Hyperlink>
                <LineBreak />
                <Hyperlink  Command="{Binding Commands.AddinManagerCommand}">  Load Addin Manager</Hyperlink>
                <LineBreak />
                <LineBreak />
                                
                <Run FontSize="22" FontWeight="DemiBold">Recent Files</Run>
                <LineBreak />                    
                    <StackPanel Name="StartPageRecentItems">       
                        <ItemsControl ItemsSource="{Binding Configuration.RecentDocuments}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>                                    
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock  Width="320" ToolTip="{Binding .}">
                                            <Hyperlink Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=DataContext.Commands.OpenRecentDocumentCommand}" CommandParameter="{Binding Filename}"  >
                                                <TextBlock Text="{Binding ., Converter={StaticResource FileNameFromPathConverter }}"    />
                                            </Hyperlink>
                                        </TextBlock>                                    
                                        <TextBlock Text="{Binding ., Converter={StaticResource FolderNameFromPathConverter }}" Opacity="0.70" FontSize="13"  />                                        
                                    </StackPanel>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>                        
                    </StackPanel>
                </TextBlock>
                
            </Grid>

   

            <GridSplitter Grid.Column="3"                                                                        
                          HorizontalAlignment="Center"                          
                          BorderThickness="0" IsTabStop="False"
                          VerticalAlignment="Stretch"
                          Visibility="{Binding IsTabOpen, Converter={StaticResource BooleanToVisibilityConverter}}"
                          >
                <GridSplitter.Template>
                    <ControlTemplate TargetType="{x:Type GridSplitter}">
                        <Grid Background="Transparent">
                            <Image Source="Assets/vsizegrip.png" Height="30" VerticalAlignment="Center" />
                        </Grid>
                    </ControlTemplate>
                </GridSplitter.Template>
            </GridSplitter>

            <Grid Grid.Column="4" Name="PreviewBrowserContainer">
            </Grid>

        </Grid>


        <StatusBar  Grid.Row ="3"  Margin="0,0,0,0" VerticalAlignment="Bottom" 
                    HorizontalAlignment="Stretch">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="4"  />
                            <ColumnDefinition Width="Auto"  />
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <!-- Markdown Parser column, width = 150 -->
                            <ColumnDefinition Width="{Binding MarkdownParserColumnWidth}"/>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            <StatusBarItem Grid.Column="0" Margin="2,1,0,0">
                <fa:FontAwesome Name="StatusIcon" Icon="Circle" Foreground="Green"/>
            </StatusBarItem>
            <StatusBarItem Grid.Column="1">
                <TextBlock Name="StatusText" x:FieldModifier="public" HorizontalAlignment="Left">Ready</TextBlock>
            </StatusBarItem>
            <Separator Grid.Column="2" />

            <StatusBarItem  Grid.Column="3">
                <ComboBox Name="StatusZoomLevel"
                          Background="Transparent" BorderBrush="Transparent" BorderThickness="0"
                          IsEditable="True" 
                          IsSynchronizedWithCurrentItem="True"
                          MouseDoubleClick="StatusZoomLevel_MouseDoubleClick"  
                          SelectionChanged="StatusZoomLevel_SelectionChanged"
                          PreviewTextInput="StatusZoomLevel_PreviewTextInput"  
                          ItemStringFormat="0\\%"
                          Text="{Binding Configuration.EditorZoomLevel,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,StringFormat='0\\%'}">
                    <ComboBox.ToolTip>
                        <TextBlock>
                            Editor font size zoom level.
                            <LineBreak /> 
                            Also use the mouse wheel or ctrl-+ and ctrl-- to zoom.
                            <LineBreak />
                            Double click to reset to 100%.
                        </TextBlock>
                    </ComboBox.ToolTip>
                    <ComboBoxItem>20</ComboBoxItem>
                    <ComboBoxItem>50</ComboBoxItem>
                    <ComboBoxItem>75</ComboBoxItem>
                    <ComboBoxItem>100</ComboBoxItem>
                    <ComboBoxItem>125</ComboBoxItem>
                    <ComboBoxItem>150</ComboBoxItem>
                    <ComboBoxItem>200</ComboBoxItem>
                    <ComboBoxItem>400</ComboBoxItem>
                </ComboBox>
            </StatusBarItem>
            <StatusBarItem Grid.Column="4">
                <TextBlock  Name="StatusStats" x:FieldModifier="public" HorizontalAlignment="Left"></TextBlock>
            </StatusBarItem>
          
            <StatusBarItem Grid.Column="5" Margin="8,0,8,0">
                <TextBlock  Name="StatusEncoding" x:FieldModifier="public" HorizontalAlignment="Left"
                            ToolTip="Document Encoding"></TextBlock>
            </StatusBarItem>
            <StatusBarItem Grid.Column="6">
                <ComboBox  HorizontalAlignment="Right"  
                           ToolTip="Registered Markdown Parsers" Width="{Binding MarkdownParserColumnWidth}"
                           SelectedItem="{Binding Configuration.MarkdownOptions.MarkdownParserName}" 
                           IsSynchronizedWithCurrentItem="True" 
                           ItemsSource="{Binding MarkdownParserNames}"
                           Background="Transparent" BorderBrush="Transparent" BorderThickness="0"
                           SelectionChanged="MarkdownParserName_SelectionChanged" />

            </StatusBarItem>
            <StatusBarItem Grid.Column="7">
                <ComboBox  HorizontalAlignment="Right"  Width="70" ToolTip="Application Themes"  
                           Name="ComboBoxAppTheme"
                           IsSynchronizedWithCurrentItem="True" Margin="0,0,3,0"    
                           SelectedValue="{Binding Configuration.ApplicationTheme}"   
                           ItemsSource="{Binding Source={StaticResource ApplicationThemeEnums}}"
                           SelectionChanged="AppTheme_SelectionChanged"
                           Background="Transparent" BorderBrush="Transparent" BorderThickness="0"                           
                />
            </StatusBarItem>
            <StatusBarItem Grid.Column="8">
                
                <ComboBox  HorizontalAlignment="Right"  Width="125" ToolTip="Editor Themes"
                           SelectedItem="{Binding Configuration.EditorTheme}"
                           IsSynchronizedWithCurrentItem="True"                            
                           ItemsSource="{Binding EditorThemeNames}"
                           Background="Transparent" BorderBrush="Transparent" BorderThickness="0"
                           SelectionChanged="EditorTheme_SelectionChanged" />
            </StatusBarItem>
            <StatusBarItem Grid.Column="9">
                <ComboBox  HorizontalAlignment="Right"  Width="125"
                           ToolTip="Preview rendering Themes"
                           SelectedItem="{Binding Configuration.RenderTheme}" 
                           IsSynchronizedWithCurrentItem="True" 
                           ItemsSource="{Binding RenderThemeNames}"
                           Background="Transparent" BorderBrush="Transparent" BorderThickness="0"
                           SelectionChanged="RenderTheme_SelectionChanged" />

            </StatusBarItem>
            <StatusBarItem Grid.Column="10">
                <ComboBox  HorizontalAlignment="Right"  Width="44" ToolTip="Preview sync mode"  
                           Name="ComboBoxPreviewSyncModes"
                           IsSynchronizedWithCurrentItem="True" Margin="0,0,3,0"    
                           SelectedValue="{Binding Configuration.PreviewSyncMode}" 
                           ItemsSource="{Binding PreviewSyncModeItems}"                           
                           DisplayMemberPath="IconString"
                           SelectedValuePath="Value" 
                           FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" FontSize="11"
                           Background="Transparent" BorderBrush="Transparent" BorderThickness="0"
                           SelectionChanged="RenderTheme_SelectionChanged">
                </ComboBox>
            </StatusBarItem>

            <StatusBarItem Grid.Column="11">
                <Button Name="ButtonStatusEncrypted" Margin="0,0,15,0" Click="Button_Handler" 
                    ToolTip="Encrypted"
                    fa:Awesome.Content="Lock" 
                    Visibility="{Binding ActiveDocument.IsEncrypted, Converter={StaticResource BooleanToVisibilityConverter}}"
                    BorderThickness="0"                     
                    TextElement.FontSize="12"
                    TextElement.FontFamily="pack://application:,,,/FontAwesome.WPF;component/#FontAwesome" />
            </StatusBarItem>

        </StatusBar>
    </Grid>
</controls:MetroWindow>
